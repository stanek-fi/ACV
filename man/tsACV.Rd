% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tsACV.R
\name{tsACV}
\alias{tsACV}
\title{Perform time-series cross-validation for a given algorithm}
\usage{
tsACV(
  y,
  algorithm,
  m,
  h = 1,
  v = 1,
  xreg = NULL,
  lossFunction = function(y, yhat) {     (y - yhat)^2 },
  ...
)
}
\arguments{
\item{y}{Univariate time-series object}

\item{algorithm}{Algorithm which is to be applied to the time-series. The object which the algorithm produces should respond to fitted and forecast methods.
Alternatively in the case of more complex custom algorithms, the algorithm may be a function which takes named arguments ("yInSample", "yOutSample", "h") or ("yInSample", "yOutSample", "h", "xregInSample", "xregOutSample") as inputs and produces list with named elements ("yhatInSample", "yhatOutSample") containing vectors of in-sample and out-of-sample forecast.}

\item{m}{Length of the window on which the algorithm ought to be trained.}

\item{h}{Number of predictions made after single training the algorithm.}

\item{v}{Number of periods by which the estimation window is shifted once the predictions are generated.}

\item{xreg}{Matrix of exogenous regressors supplied to the algorithm (if applicable).}

\item{lossFunction}{Loss function used to compute contrasts (defaults to square loss).}

\item{...}{Other parameters passed to the algorithm.}
}
\value{
Matrix of computed contrasts. Each row corresponds to particular period of the y time-series and each column corresponds to particular location of the training window.
}
\description{
Function tsACV computes contrasts between forecast produced by a given algorithm and the original time-series on which the algorithm is trained.
This can be than used to estimate the loss of the algorithm.
Unlike the similar tsCV function from forecast package however, taACV also records in-sample contrasts as these can be exploited to produce more accurate loss estimates.
}
\examples{

mn <- 40
y <- rnorm(mn)
m <- 36
h <- 1
v <- 1
algorithm <- function(y) {
  Arima(y, order = c(1, 0, 0))
}
Phi <- tsACV(y, algorithm, m = m, h = h, v = v)
Phi

}
